# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Test hui-service CICD

on:

  push:
    branches: [ "master" ]
    paths:
      - 'hui-service/**'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'hui-service/**'
  workflow_dispatch:
jobs:
  ci-cd:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Set Env from Gradle
        id: vars
        run: |
          IMAGE_NAME=$(./gradlew -q properties | grep '^name:' | awk '{print $2}')
          IMAGE_VERSION=$(./gradlew -q properties | grep '^version:' | awk '{print $2}')
          echo "PROJECT_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "PROJECT_VERSION=${IMAGE_VERSION}" >> $GITHUB_ENV
        working-directory: ./hui-service

      - name: Build with Gradle Wrapper
        run: ./gradlew bootBuildImage
        working-directory: ./hui-service

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag image explicitly for Docker Hub
        run: docker tag ${{ env.PROJECT_NAME }}:${{ env.PROJECT_VERSION }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:test
      - name: Push pre-built image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:test


      - name: Executing deploy remote ssh commands using password
        uses: appleboy/ssh-action@v1.1.0
        env:
          DB_HOST: ${{ secrets.TEST_DB_HOST }}
          DB_NAME: ${{ secrets.TEST_DB_NAME }}
          DB_USERNAME: ${{ secrets.TEST_DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          REDIS_HOST: ${{ secrets.TEST_REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.TEST_REDIS_PASSWORD }}
        with:
          host: ${{ secrets.TEST_SSH_HOST }}
          username: ${{ secrets.TEST_SSH_USERNAME }}
          password: ${{ secrets.TEST_SSH_PASSWORD }}
          port: 22
          script: |
            CONTAINER_NAME="${{ env.PROJECT_NAME }}_container"
            if [ "$(docker ps -q -f name=${CONTAINER_NAME})" ]; then
            echo "Stopping and removing existing container..."
            docker stop ${CONTAINER_NAME}
            docker rm ${CONTAINER_NAME}
            fi
            echo "Pulling the latest Docker image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:test
            # 启动新的容器并传入环境变量
            echo "Starting new container..."
            docker run -d \
            --name ${CONTAINER_NAME} \
            -p 8080:8080 \
            -e DB_HOST=${DB_HOST} \
            -e DB_NAME=${DB_NAME} \
            -e DB_USERNAME=${DB_USERNAME} \
            -e DB_PASSWORD=${DB_PASSWORD} \
            -e REDIS_HOST=${REDIS_HOST} \
            -e REDIS_PASSWORD=${REDIS_PASSWORD} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:test