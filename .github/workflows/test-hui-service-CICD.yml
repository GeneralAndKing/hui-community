# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Test hui-service CICD

on:

  push:
    branches: [ "master" ]
    paths:
      - 'hui-service/**'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'hui-service/**'
  workflow_dispatch:
jobs:
  ci-cd:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Set Docker image tag from Gradle
        id: vars
        run: |
          IMAGE_NAME=$(./gradlew -q properties | grep '^name:' | awk '{print $2}')
          IMAGE_VERSION=$(./gradlew -q properties | grep '^version:' | awk '{print $2}')
          echo "PROJECT_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "PROJECT_VERSION=${IMAGE_VERSION}" >> $GITHUB_ENV
        working-directory: ./hui-service

      - name: Build with Gradle Wrapper
        run: ./gradlew bootJar
        working-directory: ./hui-service

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: SCP files to remote server
        run: |
          sshpass -p "$REMOTE_PASSWORD" scp -o StrictHostKeyChecking=no ./build/libs/${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}.jar $REMOTE_USER@$REMOTE_HOST:/root/${{ env.PROJECT_NAME }}.jar
        env:
          REMOTE_HOST: ${{ secrets.TEST_SSH_HOST }}
          REMOTE_USER: ${{ secrets.TEST_SSH_USERNAME }}
          REMOTE_PASSWORD: ${{ secrets.TEST_SSH_PASSWORD }}
        working-directory: ./hui-service

      - name: executing deploy remote ssh commands using password
        uses: appleboy/ssh-action@v1.1.0
        env:
          DB_HOST: ${{ secrets.TEST_DB_HOST }}
          DB_NAME: ${{ secrets.TEST_DB_NAME }}
          DB_USERNAME: ${{ secrets.TEST_DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          REDIS_HOST: ${{ secrets.TEST_REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.TEST_REDIS_PASSWORD }}
        with:
          host: ${{ secrets.TEST_SSH_HOST }}
          username: ${{ secrets.TEST_SSH_USERNAME }}
          password: ${{ secrets.TEST_SSH_PASSWORD }}
          port: 21
          script: |
            PROJECT_NAME=${{env.PROJECT_NAME}}
            PID=$(ps -ef | grep "$PROJECT_NAME.jar" | grep -v grep | awk '{print $2}')
            if [ ! -z "$PID" ]; then
            echo "Process $PID is running. Stopping it..."
            kill -9 $PID
            else
            echo "No running process found for $PROJECT_NAME.jar"
            fi
            echo "Starting new instance..."
            nohup java -jar /root/$PROJECT_NAME.jar > app.log 2>&1 &